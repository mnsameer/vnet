
{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "devDisksUrl": {
      "value": null,
      "type": "string",
      "metadata": {
        "description": "URL for the Oracle Disk Create template, used to create all data disks, reused here for the dev disks as well"
      }
    },

    "nodeName": {
      "value": null,
      "type": "object",
      "metadata": {
        "description": "Object with the Name of the node and the number (i.e. 0 or 1, 0 based)"
      }
    },

    "settings": {
      "value": null,
      "type": "object",
      "metadata": {
        "description": "Object Containing all of the common settings for AD, api versions, VM Sizing, etc. See the parameters-XXX.json."
      }
    },
	"adminUsername": {
      "type": "string",
      "metadata": {
        "description": "User name for the Virtual Machine."
      }
    },
	"adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the Virtual Machine."
      }
    },

    "availabilitySetName": {
      "value": null,
      "type": "String",
      "metadata": {
        "description": "Name of the availability set to have each node part of"
      }
    }
  },

  "variables": {
    "imageVHDUri": "[parameters('settings').imageVHDUri]",
    "image": "[concat(parameters('nodeName').name, '-img')]",
    "osdisk": "[concat(parameters('nodeName').name, '-osdisk')]",
    "diskPre": "[concat(parameters('nodeName').name, '-dsk-')]",

    "vmName": "[parameters('nodeName').name]",
    "vmSize": "[parameters('settings').vmSizes.devvmsize]",
    "devNodePre": "[concat('jpdc-', toLower(parameters('settings').stage), parameters('settings').locationAbbrv)]",
    "NICName": "[concat(parameters('nodeName').name, '-nic1')]",
    "devVnetRg": "[parameters('settings').network.devVnetRg]",
    "devSubnet": "[parameters('settings').network.devSubnet]",
    "devVnet": "[parameters('settings').network.devVnet]",
    "ipArray": "[parameters('settings').network.devNodeIps]",
    "loadBalancerName": "[concat('jpdc-', parameters('settings').stage, '-lb', parameters('settings').locationAbbrv)]",
    "lbID": "[resourceId('Microsoft.Network/loadBalancers',variables('loadBalancerName'))]",
    "backendpoolname": "[concat('jpdc-dev-pool', parameters('settings').locationAbbrv)]",
    "diskCreate": "[parameters('settings').vmDisks]"
  },

  "resources": [
    {
      "comments": "Create an Image from the specified Baseline vhd",
      "type": "Microsoft.Compute/images",
      "name": "[variables('image')]",
      "apiVersion": "[parameters('settings').apiVersions.compute]",
      "location": "[resourceGroup().location]",
      "scale": null,
      "properties": {
        "storageProfile": {
          "osDisk": {
            "osType": "Linux",
            "osState": "Generalized",
            "blobUri": "[variables('imageVHDUri')]",
            "caching": "ReadWrite",
            "storageAccountType": "[parameters('settings').defaultStorageType]"
          },
          "dataDisks": []
        }
      },
      "dependsOn": []
    },
	
	{
            "comments": "Generalized from resource: networkSecurityGroups/jpdc-dev-vm-nsg",
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[parameters('settings').network.devVMmNsg]",
            "apiVersion": "2017-06-01",
            "location": "westus",
            "scale": null,
            "properties": {
                "provisioningState": "Succeeded",
                
                "securityRules": [
                    {
                        "name": "default-allow-rdp",                        
                        "properties": {
                            "provisioningState": "Succeeded",
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "destinationPortRange": "3389",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1000,
                            "direction": "Inbound",
                            "sourceAddressPrefixes": [],
                            "destinationAddressPrefixes": []
                        }
                    },
                    {
                        "name": "DNS-TCP",                       
                        "properties": {
                            "provisioningState": "Succeeded",
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "destinationPortRange": "53",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 100,
                            "direction": "Outbound",
                            "sourceAddressPrefixes": [],
                            "destinationAddressPrefixes": []
                        }
                    }
                ],
                "defaultSecurityRules": [
                    {
                        "name": "AllowVnetInBound",                       
                        "properties": {
                            "provisioningState": "Succeeded",
                            "description": "Allow inbound traffic from all VMs in VNET",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "VirtualNetwork",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 65000,
                            "direction": "Inbound",
                            "sourceAddressPrefixes": [],
                            "destinationAddressPrefixes": []
                        }
                    },
                   
                    {
                        "name": "DenyAllInBound",                       
                        "properties": {
                            "provisioningState": "Succeeded",
                            "description": "Deny all inbound traffic",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 65500,
                            "direction": "Inbound",
                            "sourceAddressPrefixes": [],
                            "destinationAddressPrefixes": []
                        }
                    },
                    {
                        "name": "AllowVnetOutBound",                       
                        "properties": {
                            "provisioningState": "Succeeded",
                            "description": "Allow outbound traffic from all VMs to all VMs in VNET",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "VirtualNetwork",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 65000,
                            "direction": "Outbound",
                            "sourceAddressPrefixes": [],
                            "destinationAddressPrefixes": []
                        }
                    },
                    {
                        "name": "AllowInternetOutBound",                        
                        "properties": {
                            "provisioningState": "Succeeded",
                            "description": "Allow outbound traffic from all VMs to Internet",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "Internet",
                            "access": "Allow",
                            "priority": 65001,
                            "direction": "Outbound",
                            "sourceAddressPrefixes": [],
                            "destinationAddressPrefixes": []
                        }
                    },
                    {
                        "name": "DenyAllOutBound",                     
                        "properties": {
                            "provisioningState": "Succeeded",
                            "description": "Deny all outbound traffic",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 65500,
                            "direction": "Outbound",
                            "sourceAddressPrefixes": [],
                            "destinationAddressPrefixes": []
                        }
                    }
                ]
            },
            "dependsOn": []
        },
		{
            "comments": "Generalized from resource: virtualNetworks",
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('devVnet')]",
            "apiVersion": "2017-06-01",
            "location": "[resourceGroup().location]",
            "scale": null,
            "properties": {
                "provisioningState": "Succeeded",                
                "addressSpace": {
                    "addressPrefixes": [
                        "10.44.0.0/16"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('devSubnet')]",
                        
                        "properties": {
                            "provisioningState": "Succeeded",
                            "addressPrefix": "10.44.6.0/24"
                        }
                    },
					{
                        "name": "[parameters('settings').network.gatewaysubnet]",
                        
                        "properties": {
                            "provisioningState": "Succeeded",
                            "addressPrefix": "10.44.7.0/24"
                        }
                    }
                ],
                "virtualNetworkPeerings": []
            },
            "dependsOn": []
    },
    {
      "comments": "Network Interface for this dev node, should be a static IP",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[parameters('settings').network.devVMmNsg]",
      "apiVersion": "[parameters('settings').apiVersions.network]",
      "location": "[resourceGroup().location]",
      "dependsOn": [ 
	  "[concat('Microsoft.Network/virtualNetworks/', parameters('settings').network.devVnet)]"	
	  ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAddress": "[parameters('settings').network.devNodeIps]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[concat(resourceId(variables('devVnetRg'), 'Microsoft.Network/virtualNetworks', variables('devVnet')), '/subnets/', variables('devSubnet'))]"
              },
              "loadBalancerBackendAddressPools": [
                {
                   "id": "[concat(variables('lbID'), '/backendAddressPools/', variables('backendpoolname'))]"
                }
              ],
              "loadBalancerInboundNatRules": []
            }
          }
        ],
        "dnsSettings": {
          "dnsServers": []
        },
        "enableIPForwarding": false
      }
    },
    {
      "comments": "dev Virtual Node(s). Runs fixed jobs.",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('vmName')]",
      "apiVersion": "[parameters('settings').apiVersions.compute]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/images', variables('image'))]",
        "[resourceId('Microsoft.Network/networkInterfaces', variables('NICName'))]"
      ],
      "tags": {
        "displayName": "VirtualMachine",
        "node": "devnode"
      },
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))]"
        },

        "hardwareProfile": {
          "vmSize": "[variables('vmSize')]"
        },
        "osProfile": {
          "computerName": "[variables('vmName')]",
          "adminUsername": "[parameters('adminUsername')]",
		  "adminPassword": "[parameters('adminPassword')]",
          "linuxConfiguration": {
                        "disablePasswordAuthentication": false
                    },
                    "secrets": []
        },
        "storageProfile": {
          "imageReference": {
            "id": "[resourceId('Microsoft.Compute/images', variables('image'))]"
          },
          "osDisk": {
            "name": "[variables('osdisk')]",
            "osType": "Linux",
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "[parameters('settings').defaultStorageType]"
            }
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('NICName'))]"
            }
          ]
        }
      }
    },
    
    {
      "comments": "Create all of the data disks, thes need to be attached manualy for now using th mountAll script",
      "name": "[concat(variables('devNodePre'), '-Disk-', copyIndex(1))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "[parameters('settings').apiVersions.deploy]",

      "copy": {
        "name": "devdiskscopy",
        "count": "[length(variables('diskCreate'))]"
      },
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[parameters('devDisksUrl')]",
          "contentVersion": "1.0.0.0"
        },

        "parameters": {
          "nodeName": {
            "value": {
              "name": "[concat(variables('diskPre'), variables('diskCreate')[copyIndex()].Nm)]",
              "number": "[copyIndex(1)]"
            }
          },
          "diskSize": {
            "value": "[variables('diskCreate')[copyIndex()].Sz]"
          },

          "settings": {
            "value": "[parameters('settings')]"
          }
        }
      }
    }
  ]
}
