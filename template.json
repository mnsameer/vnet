{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {

    "keyVaultNm": {
      "value": null,
      "type": "string",
      "metadata": {
        "description": "Key vault name, contains keys for logging into the AD"
      }
    },

    "keyVaultRg": {
      "value": null,
      "type": "string",
      "metadata": {
        "description": "Resource Group for the above Key vault"
      }
    },

    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "User name for the Virtual Machine."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the Virtual Machine."
      }
    },

    "settings": {
      "value": null,
      "type": "object",
      "metadata": {
        "description": "Object Containing all of the common settings for AD, api versions, VM Sizing, etc. See the parameters-XXX.json."
      }
    },

    "templateUrl": {
      "value": null,
      "type": "string",
      "metadata": {
        "description": "Base URL where the JPDC Templates are located"
      }
    }
  },

  "variables": {
    "availabilitySetName": "[concat('jpdc-',parameters('settings').stage),'-avail', parameters('settings').locationAbbrv)]",
    "keyVault": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', parameters('keyVaultRg'), '/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultNm'))]",

    "devUrl": "[concat(parameters('templateUrl'), '/dev.json')]",
    "policyUrl": "[concat(parameters('templateUrl'), '/policy.json')]",
    "backupUrl": "[concat(parameters('templateUrl'), '/backup.json')]",

    "resourcegrp": "[concat('jpdc','-dev', parameters('settings').locationAbbrv, '-rg')]",

    "loadBalancerName": "[concat('jpdc-', parameters('settings').stage, '-lb', parameters('settings').locationAbbrv)]",
    "lbID": "[resourceId('Microsoft.Network/loadBalancers',variables('loadBalancerName'))]",
    "backendpoolname": "[concat('jpdc-dev-pool', parameters('settings').locationAbbrv)]",
    "lbPoolID": "[concat(variables('lbID'),'/backendAddressPools/',variables('backendpoolname'))]",
    "frontEndIPConfigID": "[concat(variables('lbID'),'/frontendIPConfigurations/LoadBalancerFrontEnd')]",
    "nfsprobe": "[concat('jpdc-', parameters('settings').stage, '-dev-probe-nfs')]",
    "lbProbeID1": "[concat(variables('lbID'),'/probes/',variables('nfsprobe'))]",
    "cifsprobe": "[concat('jpdc-', parameters('settings').stage, '-dev-probe-cifs')]",
    "lbProbeID2": "[concat(variables('lbID'),'/probes/',variables('cifsprobe'))]",
    "smbprobe": "[concat('jpdc-', parameters('settings').stage, '-dev-probe-smb')]",
    "lbProbeID3": "[concat(variables('lbID'),'/probes/',variables('smbprobe'))]",

    "devVnetRg": "[parameters('settings').network.devVnetRg]",
    "devSubnet": "[parameters('settings').network.devSubnet]",
    "devVnet": "[parameters('settings').network.devVnet]",
    "devNodePre": "[concat('jpdc-', toLower(parameters('settings').stage), '-dev', parameters('settings').locationAbbrv)]"
  },
  "resources": [
    {
     "apiVersion": "2015-05-01-preview",
     "name": "[variables('loadBalancerName')]",
     "type": "Microsoft.Network/loadBalancers",
     "location": "[resourceGroup().location]",
     "properties": {
       "frontendIPConfigurations": [
         {
           "name": "LoadBalancerFrontEnd",
           "properties": {
             "privateIPAddress": "[parameters('settings').network.devLoadBal]",
  	         "privateIPAllocationMethod": "Static",
             "subnet":{
               "id": "[concat(resourceId(variables('devVnetRg'), 'Microsoft.Network/virtualNetworks', variables('devVnet')), '/subnets/', variables('devSubnet'))]"
             }
             }

           }
         ],

       "backendAddressPools": [
         {
           "name": "[variables('backendpoolname')]"
         }
       ],
       "inboundNatRules": [],
       "loadBalancingRules": [
         {
           "name": "[concat('jpdc-', parameters('settings').stage, '-dev-rule-nfs', parameters('settings').locationAbbrv)]",
           "properties": {
             "frontendIPConfiguration": {
               "id": "[variables('frontEndIPConfigID')]"
             },
             "backendAddressPool": {
               "id": "[variables('lbPoolID')]"
             },
             "frontendPort": 2049,
 	           "backendPort": 2049,
	           "enableFloatingIP": false,
	           "idleTimeoutInMinutes": 4,
	           "protocol": "Tcp",
	           "loadDistribution": "SourceIP",
             "probe": {
               "id": "[variables('lbProbeID1')]"
             }
           }
         },
         {
           "name": "[concat('jpdc-', parameters('settings').stage, '-dev-rule-cifs', parameters('settings').locationAbbrv)]",
           "properties": {
             "frontendIPConfiguration": {
               "id": "[variables('frontEndIPConfigID')]"
             },
             "backendAddressPool": {
               "id": "[variables('lbPoolID')]"
             },
             "frontendPort": 139,
 	           "backendPort": 139,
	           "enableFloatingIP": false,
	           "idleTimeoutInMinutes": 4,
	           "protocol": "Tcp",
	           "loadDistribution": "SourceIP",
             "probe": {
               "id": "[variables('lbProbeID2')]"
             }
           }
         },
         {
           "name": "[concat('jpdc-', parameters('settings').stage, '-dev-rule-smb', parameters('settings').locationAbbrv)]",
           "properties": {
             "frontendIPConfiguration": {
               "id": "[variables('frontEndIPConfigID')]"
             },
             "backendAddressPool": {
               "id": "[variables('lbPoolID')]"
             },
             "frontendPort": 445,
 	           "backendPort": 445,
	           "enableFloatingIP": false,
	           "idleTimeoutInMinutes": 4,
	           "protocol": "Tcp",
	           "loadDistribution": "SourceIP",
             "probe": {
               "id": "[variables('lbProbeID3')]"
             }
           }
         }
       ],
       "probes": [
         {
           "name": "[concat('jpdc-', parameters('settings').stage, '-dev-probe-nfs', parameters('settings').locationAbbrv)]",
           "properties": {
             "protocol": "tcp",
             "port": 2049,
             "intervalInSeconds": 5,
             "numberOfProbes": 2
           }
         },
         {
           "name": "[concat('jpdc-', parameters('settings').stage, '-dev-probe-cifs', parameters('settings').locationAbbrv)]",
           "properties": {
             "protocol": "tcp",
             "port": 139,
             "intervalInSeconds": 5,
             "numberOfProbes": 2
           }
         },
         {
           "name": "[concat('jpdc-', parameters('settings').stage, '-dev-probe-smb', parameters('settings').locationAbbrv)]",
           "properties": {
             "protocol": "tcp",
             "port": 445,
             "intervalInSeconds": 5,
             "numberOfProbes": 2
           }
         }
       ]
       }
     },
    {
      "comments": "Availabity set that contains the dev nodes, do not want both down at the same time.",
      "type": "Microsoft.Compute/availabilitySets",
      "sku": {
        "name": "Aligned"
      },
      "name": "[variables('availabilitySetName')]",
      "apiVersion": "[parameters('settings').apiVersions.compute]",
      "location": "[resourceGroup().location]",
      "properties": {
        "platformUpdateDomainCount": 5,
        "platformFaultDomainCount": 2
      }
    },
    {
      "name": "[concat('devNode-', copyIndex(1))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "[parameters('settings').apiVersions.deploy]",
      "dependsOn": [
        "[concat('Microsoft.Network/loadBalancers/', 'jpdc-', parameters('settings').stage,'-lb', parameters('settings').locationAbbrv)]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetName'))]"
      ],
      "copy": {
        "name": "devnodescopy",
        "count": "[parameters('settings').nodeCount.dev]"
      },
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('devUrl')]",
          "contentVersion": "1.0.0.0"
        },

        "parameters": {
          "oraDisksUrl": {
            "value": "[concat(parameters('templateUrl'), '/devDisks.json')]"
          },

          "nodeName": {
            "value": {
              "name": "[concat(variables('devNodePre'), copyIndex(1))]",
              "number": "[copyIndex()]"
            }
          },

          "settings": {
            "value": "[parameters('settings')]"
          },

          "availabilitySetName": {
            "value": "[variables('availabilitySetName')]"
          },

          "adminUsername": {
          "value": "[parameters('adminUsername')]"
        }
        }
      }
    },
    {
      "name": "JPDC-Dev-Policy",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "[parameters('settings').apiVersions.deploy]",
      "dependsOn": [
        "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetName'))]"
      ],

      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('policyUrl')]",
          "contentVersion": "1.0.0.0"
        },

    "parameters": {
    "vaultName": {
      "value": "devbackup"
    },
    "policyName": {
        "value": "DailyBackupPolicy1"
    },
    "scheduleRunDays": {
        "value": [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ]
    },
    "scheduleRunTimes": {
        "value": [ "2016-09-21T05:30:00Z" ]
    },
    "weeklyRetentionDurationCount": {
        "value": 104
    },
    "daysOfTheWeekForMontlyRetention": {
        "value": [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ]
    },
    "weeksOfTheMonthForMonthlyRetention": {
        "value": [ "First", "Third" ]
    },
    "monthlyRetentionDurationCount": {
        "value": 60
    },
    "monthsOfYear": {
        "value": [ "January", "March", "August" ]
    },
    "daysOfTheWeekForYearlyRetention": {
        "value": [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ]
    },
    "weeksOfTheMonthForYearlyRetention": {
        "value": [ "First", "Third" ]
    },
    "yearlyRetentionDurationCount": {
        "value": 10
    }
  }
      }
    },
    {
      "name": "[concat('JPDC-Dev-Backup-', copyIndex(1))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "[parameters('settings').apiVersions.deploy]",
      "dependsOn": [
        "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetName'))]",
        "[concat('Microsoft.Resources/deployments/', 'JPDC-Dev-Policy')]",
        "[concat('Microsoft.Resources/deployments/', 'devNode-', copyIndex(1))]"
      ],
      "copy": {
        "name": "devbackupcopy",
        "count": "[parameters('settings').nodeCount.dev]"
      },
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('backupUrl')]",
          "contentVersion": "1.0.0.0"
        },

        "parameters": {
    "existingVirtualMachinesResourceGroup": {
      "value": "[variables('resourcegrp')]"
    },
    "existingVirtualMachines": {
      "value": ["[concat(variables('devNodePre'), copyIndex(1))]"]
    },
    "existingRecoveryServicesVault": {
      "value": "devbackup"
    },
    "existingBackupPolicy": {
      "value": "DailyBackupPolicy1"
    }
  }
      }
    }
  ]
}
